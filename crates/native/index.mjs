/**
 * DO NOT EDIT THIS FILE DIRECTLY.
 * This file is generated following the conversion of 
 * @see [./index.js]{@link ./index.js}
 * 
 **/
import { fileURLToPath } from "url";
import { dirname } from "path";
const __dirname = dirname(fileURLToPath(import.meta.url));
import { existsSync, readFileSync }  from "fs";
import { join }  from "path";
import _toesmTemp1  from "child_process";
import nativeBinding  from "./native.android-arm64.mjs";
import nativeBinding  from "native-android-arm64";
import nativeBinding  from "./native.android-arm-eabi.mjs";
import nativeBinding  from "native-android-arm-eabi";
import nativeBinding  from "./native.win32-x64-msvc.mjs";
import nativeBinding  from "native-win32-x64-msvc";
import nativeBinding  from "./native.win32-ia32-msvc.mjs";
import nativeBinding  from "native-win32-ia32-msvc";
import nativeBinding  from "./native.win32-arm64-msvc.mjs";
import nativeBinding  from "native-win32-arm64-msvc";
import nativeBinding  from "./native.darwin-universal.mjs";
import nativeBinding  from "native-darwin-universal";
import nativeBinding  from "./native.darwin-x64.mjs";
import nativeBinding  from "native-darwin-x64";
import nativeBinding  from "./native.darwin-arm64.mjs";
import nativeBinding  from "native-darwin-arm64";
import nativeBinding  from "./native.freebsd-x64.mjs";
import nativeBinding  from "native-freebsd-x64";
import nativeBinding  from "./native.linux-x64-musl.mjs";
import nativeBinding  from "native-linux-x64-musl";
import nativeBinding  from "./native.linux-x64-gnu.mjs";
import nativeBinding  from "native-linux-x64-gnu";
import nativeBinding  from "./native.linux-arm64-musl.mjs";
import nativeBinding  from "native-linux-arm64-musl";
import nativeBinding  from "./native.linux-arm64-gnu.mjs";
import nativeBinding  from "native-linux-arm64-gnu";
import nativeBinding  from "./native.linux-arm-musleabihf.mjs";
import nativeBinding  from "native-linux-arm-musleabihf";
import nativeBinding  from "./native.linux-arm-gnueabihf.mjs";
import nativeBinding  from "native-linux-arm-gnueabihf";
import nativeBinding  from "./native.linux-riscv64-musl.mjs";
import nativeBinding  from "native-linux-riscv64-musl";
import nativeBinding  from "./native.linux-riscv64-gnu.mjs";
import nativeBinding  from "native-linux-riscv64-gnu";
import nativeBinding  from "./native.linux-s390x-gnu.mjs";
import nativeBinding  from "native-linux-s390x-gnu";
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */


const { platform, arch } = process

nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      
const lddPath  = _toesmTemp1.execSync('which ldd').toString().trim()

      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'native.android-arm64.node'))
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'native.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'native.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'native.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'native.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'native.darwin-universal.node'))
    try {
      if (localFileExisted) {
              } else {
              }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'native.darwin-x64.node'))
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'native.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'native.freebsd-x64.node'))
    try {
      if (localFileExisted) {
              } else {
              }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'native.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
                          } else {
                          }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'native.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
                      } else {
                      }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

export const { sum, readFileInfo, readFileAsync } = nativeBinding
